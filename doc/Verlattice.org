#+TODO: TODO(t!) DESIGNED(d!) REWORK(r!) | IMPLEMENTED(i!)

* Specs

** Specification for Verlattice 0.1 ('Mango')

This document will be used as the basis for a usability evaluation, once all of the listed features
are completed.

*** Scope Inclusions

   - Creating strategies, actions and objects
   - Dealing with multiple instances of an object

*** Scope Exclusions

   - Probabilistic stuff

*** Use Cases

**** Data Entry [7/8]

Functionality that supports the system's operation.

***** IMPLEMENTED Create an object class
      - State "IMPLEMENTED" from "TODO"       [2014-12-27 Sat 18:45]
      CLOCK: [2014-12-27 Sat 17:10]--[2014-12-27 Sat 18:45] =>  1:35
     - State "TODO"       from ""           [2014-12-27 Sat 09:52]

I'll represent all manner of things using objects.

***** IMPLEMENTED Create an action
      - State "IMPLEMENTED" from "TODO"       [2014-12-27 Sat 20:00]
      CLOCK: [2014-12-27 Sat 18:45]--[2014-12-27 Sat 20:00] =>  1:15
     - State "TODO"       from ""           [2014-12-27 Sat 09:53]

The action takes as input a set of object names and counts, and produces a set of object names and
counts. We must support use and consumption of resources and be able to specify the time at which
each object is used/consumed/produced.

***** IMPLEMENTED Delete an action
      - State "IMPLEMENTED" from "TODO"       [2014-12-27 Sat 23:14]
      - State "TODO"       from ""           [2014-12-27 Sat 19:59]

Only allow the deletion if the action isn't used by any strategy.

***** IMPLEMENTED Create a strategy
      - State "IMPLEMENTED" from "TODO"       [2014-12-28 Sun 22:26]
     - State "TODO"       from ""           [2014-12-27 Sat 09:53]

The strategy comprises a set of pairs of actions to execute and the date on which they will be
executed. Actions can also be applied multiple times.

***** IMPLEMENTED Duplicate a strategy
      - State "IMPLEMENTED" from "TODO"       [2014-12-28 Sun 23:23]
      - State "TODO"       from "IMPLEMENTED" [2014-12-28 Sun 23:09]
      - State "IMPLEMENTED" from "TODO"       [2014-12-28 Sun 23:05]
      - State "TODO"       from ""           [2014-12-27 Sat 10:13]

***** IMPLEMENTED Delete a strategy
      - State "IMPLEMENTED" from "TODO"       [2014-12-28 Sun 23:41]
      - State "TODO"       from ""           [2014-12-27 Sat 10:17]

***** IMPLEMENTED Schedule an action against a strategy
      - State "IMPLEMENTED" from "TODO"       [2014-12-29 Mon 22:09]
      - State "TODO"       from ""           [2014-12-27 Sat 22:56]

***** TODO Instantiate an object in a particular schedule
     - State "TODO"       from ""           [2014-12-27 Sat 09:57]

If there's an object which is known to exist at some point in time, I can instantiate it directly
against a strategy. If I want to make an object available for a particular range of dates, I will
have to create an action to remove the object at the appropriate date.

**** Value [0/4]

Functionality that provides value to the user.

***** TODO Tell me which strategies have conflicts
     - State "TODO"       from ""           [2014-12-27 Sat 09:58]

The system should indicate the name of each strategy that is in conflict, as well as the actions
that cannot be performed and the date on which those conflicting actions were due to be executed.

***** TODO View the future actions involving a particular resource
     - State "TODO"       from ""           [2014-12-27 Sat 10:06]

To see what I'll be working on, and maybe some other things.

***** TODO Set the active strategy
     - State "TODO"       from ""           [2014-12-27 Sat 10:07]

To communicate to colleagues what we should all be working on.

***** TODO See which strategies are similar to the one I'm currently viewing
     - State "TODO"       from ""           [2014-12-27 Sat 10:14]

To allow me to get a feel for the set of available strategies.

* Misc. Documents

** Market Description


*** User Types

  - Individuals for personal project management
  - Corporate users managing a business' assets

*** Criteria

  - Corporate users' employers must have a revenue <$1bn p.a.

*** Pricing Approach

**** Tiered

  - Free for up to 3 users on one instance
  - £5/month for <=10 users
  - £10/month for <=100 users
  - £50/month for <= 1000 users

**** Trial

As with the /Tiered/ approach, but without the free tier. Instead, a
14 day free trail will be offered.

** Basic Cake Scenario

  - Create new schedule, schedule 0.
  - Create objects representing GBP and cake.
  - Create actions to buy cake and to attend party.
  - Schedule party attendance action to Day 5.
  - Instantiate 100 GBP on Day 0.
  - Ask the system what conflicts exist.
  - Schedule the cake-buying action.

*** Schedules

  - Schedule 0 - the only schedule

*** Objects

  - GBP
  - Cake

*** Actions

  - AttendParty
    - Input: 1 Cake
    - Output: None

** ASCII Columns Output



* Ideas

** Use server purchase as a model for trying out Verlattice

I could develop strategies involving buying servers of different capabilities and using different
pricing strategies (dog food).

*** Or even the whole Verlattice project

This is probably the obvious thing to do.

** Verlattice could eventually be used for publishing roadmaps

*** And what about project status updates?
