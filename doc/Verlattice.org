#+TODO: TODO(t!) DESIGNED(d!) SERVERCOMPLETE(s!) REWORK(r!) | IMPLEMENTED(i!)

* Specs

** Specification for Verlattice 0.1 ('Mango')

*** Introduction

The purpose of Verlattice Mango is to allow a user to manage resources with limited availability.

It should be possible to enter data on resource usage, with the system indicating when a resource
is expected to run out.

*** Data Structures

  - Resources (e.g. GBP)
  - Actions (e.g. buy a cake)
  - A Schedule (where actions are scheduled)

*** User Functionality

**** Resource Types [0/4]

***** TODO Create a new resource type [0/1]
      - State "TODO"       from ""           [2015-05-08 Fri 18:51]

****** TODO Support decimal places
       - State "TODO"       from ""           [2015-05-08 Fri 19:13]

***** TODO Rename a resource type
      - State "TODO"       from ""           [2015-05-08 Fri 18:54]

***** TODO Delete a resource type
      - State "TODO"       from ""           [2015-05-08 Fri 18:53]

**** Actions [0/4]

***** TODO Create a new action
      - State "TODO"       from ""           [2015-05-08 Fri 18:56]

***** TODO Rename an action
      - State "TODO"       from ""           [2015-05-08 Fri 18:56]

***** TODO Delete an action
      - State "TODO"       from ""           [2015-05-08 Fri 18:56]

***** Action Editing [0/2]

****** TODO Add an input/output resource [0/2]
       - State "TODO"       from ""           [2015-05-08 Fri 18:58]

******* TODO Support automatic creation of resources
	- State "TODO"       from ""           [2015-05-08 Fri 18:59]

******* TODO Support basic edit distance matching
	- State "TODO"       from ""           [2015-05-08 Fri 19:00]

****** TODO Remove an input/output resource
       - State "TODO"       from ""           [2015-05-08 Fri 18:59]

**** Plans [0/3]
***** TODO Create a new plan
      - State "TODO"       from ""           [2015-05-08 Fri 18:57]

***** TODO Rename a plan
      - State "TODO"       from ""           [2015-05-08 Fri 19:02]

***** Plan Editing [0/2]

****** TODO Schedule an action [0/3]
       - State "TODO"       from ""           [2015-05-08 Fri 19:06]

******* TODO Support repeated actions
	- State "TODO"       from ""           [2015-05-08 Fri 19:08]

******* TODO Support dynamic creation of new actions
	- State "TODO"       from ""           [2015-05-08 Fri 20:14]

******* TODO Support basic edit distance matching
	- State "TODO"       from ""           [2015-05-08 Fri 20:15]
****** TODO Remove a scheduled action
       - State "TODO"       from ""           [2015-05-08 Fri 19:06]

***** TODO Delete a plan
      - State "TODO"       from ""           [2015-05-08 Fri 19:18]

*** System Functionality

**** Plan Feedback [0/3]

***** TODO Display system health on the welcome screen
      - State "TODO"       from ""           [2015-05-08 Fri 19:20]

***** TODO Display each plan's health on the Manage Plans screen
      - State "TODO"       from ""           [2015-05-08 Fri 19:20]

***** TODO Display resource conflicts on the Edit Plan screen
      - State "TODO"       from ""           [2015-05-08 Fri 19:23]

* Misc. Documents

** Market Description

*** User Types

  - Individuals for personal money/asset management
  - Corporate users managing a business' assets

*** Criteria

  - Corporate users' employers must have a revenue <$1bn p.a.

*** Pricing Approach

**** Tiered

  - Free for up to 3 users on one instance
  - £5/month for <=10 users
  - £25/month for <=100 users
  - £100/month for <= 1000 users

I should really do some benchmarking and check cloud prices before deciding on this.

Specifically, get a cheap VPS and see how many simulated users it can handle.

**** Trial

As with the /Tiered/ approach, but without the free tier. Instead, a 14 day free trail will be
offered.

** ASCII Columns Output

* Ideas

** Mimic evolution

To help ensure the eventual success of the project, I'll try to identify a useful set of
functionality that the application could have. I'll implement that, then fine-tune it. Then, I'll
move onto the next feature set.

The idea is to have each iteration yield a viable product in its own right, even though they are
only intermediate steps towards the final product.

** Secrecy

We could allow resources, actions and schedules to be restricted.

We'd need to create restricted duplicates of the resources and actions if a schedule was
restricted. Otherwise, other users could make changes to a restricted schedule they weren't allowed
to access.

This feature might undermine users' confidence in the system but is probably needed for a lot of
corporate deployments.

** Democratic resource utilisation

People could use Verlattice to collectively decide how to use shared resources.

The key question is: how can the group come to a consensus?

Users could vote on which plans- or sections of plans- that the approve of.

Perhaps something like AV for plan voting, i.e. users say which plans they're okay with, and their
order of preference.

*** Motivating participants

How do we motivate people to contribute to plan development?

We could allow them to allocate some resources to themselves as part of the plan. They wouldn't
allocate too much, since that would reduce the probability of their plan being accepted by the
public.

So, people will try to make an improvements to the plan, and include a small reward for themselves.

*But... what's to stop people from removing the reward as their only change (perhaps to spite the
person giving themselves that reward)?*

*** Stochastic approach

  - The system shows users the difference between two semi-randomly selected plans.
  - The user chooses their preferred plan.
  - The popular elements are combined to form new plans.
  - The process repeats many times.
  - The system produces a /consensus plan/.
